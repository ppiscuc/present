No Goroutine left behind
or how to stop gracefully and avoid leaking goroutines
4 Feb 2017
Tags: Golang, goroutine, channels

Paul Piscuc
Security Consultant
@ppiscuc

* About me

- Using go for 2 years
- Working at [[http://proximus.com][Proximus]]
- Doing security

.image gopherizeme.png _ 300

* Goroutines are fun

Easy to start

Light on the OS (lightweight threads)

In the language, not a library


.play simplego.go /START OMIT/,/END OMIT/

* Goroutines are dangerous

They use the same address space, so access to shared memory must be syncronized

Share memory by communicating (use channels!)

.play channels.go /START OMIT/,/END OMIT/

* Easy to start but hard to stop

Goroutines are easy to start, but how do we stop them?

We will have 2 workers: 1 that does the work and finishes, 1 that will be forever

    func doWork() {
    		time.Sleep(time.Duration(rand.Intn(1000)) * time.Millisecond)
    		fmt.Println("work")
    }

    func doWorkForever() {
    	for {
    		time.Sleep(time.Duration(rand.Intn(1000)) * time.Millisecond)
    		fmt.Println("work")
    	}
    }

* BAD: Ignore it

The go statement runs the function, but doesn't make the caller wait.
This way, main can exit before the goroutine executed.

.play ignore.go /START OMIT/,/END OMIT/

* BAD: Ignore it a bit longer

Wait for a specific time period, and then exist  (please don't do this)

.play timesleep.go /START OMIT/,/END OMIT/

* Wait group

A WaitGroup waits for a goroutine or collection of goroutines to finish.
The main goroutine calls Add to set the number of goroutines.
Then, each gorouine runs and calls Done when finished.
Wait will block untill all goroutines have finished.

.play waitgroup.go /START OMIT/,/END OMIT/

* Wait group - multiple

What about multiple workers? The same principle applies

.play waitgroup1.go /START OMIT/,/END OMIT/

* Signal channel

Use a channel to signal the worker that it's time to close

.play signalchannel.go /START OMIT/,/END OMIT/

* Signal channel - multiple

What about signaling multiple workers? Closing the channel will notify all the workers

.play signalchannel1.go /START OMIT/,/END OMIT/

* What if we need to do teardown?

We use another channel!

.play signalteardown.go /START OMIT/,/END OMIT/

* Context

Can I do it with context? Yes you can!

Great presentation about context [[https://talks.golang.org/2014/gotham-context.slide]]

.play context.go /START OMIT/,/END OMIT/

* How do I handle CTRL+C ?

CTRL+C and friends can be cought as an OS signal

.play signalos.go /START OMIT/,/END OMIT/

* Conclusions

- don't leak goroutines. Find a suitable way of stopping them
- use Context if you have a chain of calls
- don't ignore teardown